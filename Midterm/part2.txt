Author: Venkatesh Tantravahi

#include <iostream>
#include <sys/time.h>
#include <ctime>
#include "cuda_runtime.h"
#include "device_launch_parameters.h"

struct MyTime {
    char *time_of_day;      // Start time of the experiment
    int seconds_elapsed;    // Seconds elapsed for call to myKernel
    int useconds_elapsed;   // Microseconds elapsed for call to myKernel
};

/**
 * Tests the performance of the myKernel CUDA kernel function.
 * 
 * @param X Pointer to the first input matrix in device memory.
 * @param Y Pointer to the second input matrix in device memory.
 * @param Z Pointer to the output matrix in device memory.
 * @param size The size of the NxN matrices.
 * @return A MyTime structure containing the time of day when the test started and the elapsed time.
 */
MyTime myKernelTester(float *X, float *Y, float *Z, int size) {
    // Define the number of threads and blocks in each dimension
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((size + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (size + threadsPerBlock.y - 1) / threadsPerBlock.y);

    // Create CUDA events for timing
    cudaEvent_t start, stop;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);

    // Get the current time of day
    struct timeval start_time;
    gettimeofday(&start_time, NULL);
    struct tm* timeinfo = localtime(&start_time.tv_sec);
    char timeString[100];
    strftime(timeString, sizeof(timeString), "%a %b %d %H:%M:%S %Z %Y", timeinfo);

    // Allocate a string for time_of_day
    char* time_of_day = new char[strlen(timeString) + 1];
    strcpy(time_of_day, timeString);

    // Start timing
    cudaEventRecord(start);

    // Launch the kernel
    myKernel<<<numBlocks, threadsPerBlock>>>(X, Y, Z, size);
    cudaDeviceSynchronize();

    // Stop timing
    cudaEventRecord(stop);
    cudaEventSynchronize(stop);

    // Calculate the elapsed time
    float milliseconds = 0;
    cudaEventElapsedTime(&milliseconds, start, stop);
    int seconds = static_cast<int>(milliseconds / 1000);
    int useconds = static_cast<int>((milliseconds - seconds * 1000) * 1000);

    // Clean up CUDA events
    cudaEventDestroy(start);
    cudaEventDestroy(stop);

    // Return the timing information
    MyTime result = {time_of_day, seconds, useconds};
    delete[] time_of_day; // Assuming MyTime does not need to persist this data.
    return result;
}
